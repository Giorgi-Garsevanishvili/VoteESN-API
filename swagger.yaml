openapi: 3.0.0
info:
  title: VoteESN-API
  version: 3.5.3
servers:
  - url: https://voteesn-api.onrender.com/api/v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Register/Login
  - name: Voter / Election
  - name: Voter / User Controllers
  - name: Admin / election > Election Controllers
  - name: Admin / election > User Controllers
  - name: Admin / election > Voter Access Tokens
  - name: Admin / election > Voter Access QR
  - name: Admin / election > Voter Token Reveal
  - name: Admin / election > Results
  - name: Admin / election > IP Settings
  - name: Admin / election > Email Notification
paths:
  /user/account:
    get:
      tags:
        - Voter / User Controllers
      summary: Get Own Account info
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response

    patch:
      tags:
        - Voter / User Controllers
      summary: Update Own User
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                role: ""
      responses:
        "200":
          description: Successful response

    delete:
      tags:
        - Voter / User Controllers
      summary: delete Own User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response

  /user/tokenvalidation:
    post:
      tags:
        - Voter / Election
      summary: Token Validation
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: ""
      responses:
        "200":
          description: Successful response

  /admin/election/email:
    post:
      tags:
        - Admin / election > Email Notification
      summary: Send Access Codes
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                to: ""
                tokenId: ""
      responses:
        "200":
          description: Successful response

  /admin/election/revealToken:
    post:
      tags:
        - Admin / election > Voter Token Reveal
      summary: Voter Token Reveal
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                tokenId: ""
                form: {}
                lsdata: {}
      responses:
        "200":
          description: Successful response

  /auth/register:
    post:
      tags:
        - Register/Login
      summary: Register
      security:
        - bearerAuth: []
      description: >-
        This is a POST request, submitting data to an API via the request body.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: ""
                email: ""
                password: ""
      responses:
        "200":
          description: Successful response

  /auth/login:
    post:
      tags:
        - Register/Login
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: ""
                password: ""
      responses:
        "200":
          description: Successful response
        
  /auth/reset-password-request:
    post:
      tags:
        - Register/Login
      summary: Password Reset Request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: ""
      responses:
        "200":
          description: Successful response
                  
          
  /auth/reset-password:
    post:
      tags: 
        - Register/Login
      summary: Reset user password using a token
      description: Allows a user to reset their password using a valid JWT token sent via query.
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: The password reset JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  example: "newStrongPassword123"
      responses:
        200:
          description: Password updated successfully
        400:
          description: Bad request
        401:
          description: Token is expired or invalid

  /admin/voter/settings:
    get:
      tags:
        - Admin / election > IP Settings
      summary: Get IP Settings From DB
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response

    post:
      tags:
        - Admin / election > IP Settings
      summary: Create IP Settings
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                ipRestrictionEnabled: false
      responses:
        "200":
          description: Successful response

  /admin/voter/settings/{id}:
    patch:
      tags:
        - Admin / election > IP Settings
      summary: Update IP Settings
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: IP Setting ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                ipRestrictionEnabled: true,
                allowedIPs:
                  - "123.456.789.22"
                  - "123.131.213.2"
      responses:
        "200":
          description: Successful response

    delete:
      tags:
        - Admin / election > IP Settings
      summary: Delete IP Settings
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: IP Settings ID
      responses:
        "200":
          description: Successful response

  /user/voter:
    get:
      tags:
        - Voter / Election
      summary: getAllElection
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response

  /user/voter/{id}:
    get:
      tags:
        - Voter / Election
      summary: getOneElection
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "Election ID"
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: "Authentication token"
      responses:
        "200":
          description: Successful response

    post:
      tags:
        - Voter / Election
      summary: submitVote
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: "Election ID"
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: "Authentication token"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - question: Why did you do that?
                  selectedOption: I don't know
      responses:
        "200":
          description: Successful response

  /admin/election:
    post:
      tags:
        - Admin / election > Election Controllers
      summary: createElection
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Election 2025
                topics:
                  - title: Candidate 1
                    options:
                      - text: Yes
                      - text: No
      responses:
        "200":
          description: Successful response

    get:
      tags:
        - Admin / election > Election Controllers
      summary: getAllElection
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response

  /admin/election/{id}:
    get:
      tags:
        - Admin / election > Election Controllers
      summary: getOneElection
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response

    patch:
      tags:
        - Admin / election > Election Controllers
      summary: updateElection
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Election ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Election 2026
                topics:
                  - title: Giorgi as a president
                    options:
                      - text: Yes
                      - text: No
      responses:
        "200":
          description: Successful response

    delete:
      tags:
        - Admin / election > Election Controllers
      summary: deleteElection
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Election ID
      responses:
        "200":
          description: Successful response

  /admin/election/tokens/{id}:
    get:
      tags:
        - Admin / election > Voter Access Tokens
      summary: getAccessCodes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response

  /admin/election/{id}/generate-qr:
    post:
      tags:
        - Admin / election > Voter Access QR
      summary: generate QR Codes and Tokens
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Election ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                electionId: ""
                numToken: 5
      responses:
        "200":
          description: Successful response

    get:
      tags:
        - Admin / election > Voter Access QR
      summary: Get QR codes ZIP
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Election ID
      responses:
        "200":
          description: Successful response
          content:
            application/zip:
              schema:
                type: string
                format: binary

    delete:
      tags:
        - Admin / election > Voter Access QR
      summary: Delete Access QR codes and Tokens
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Election ID
      responses:
        "200":
          description: Successful response

  /admin/system/users:
    get:
      tags:
        - Admin / election > User Controllers
      summary: Get Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response

    post:
      tags:
        - Admin / election > User Controllers
      summary: createUser
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: ""
                email: ""
                password: ""
                role: ""
      responses:
        "200":
          description: Successful response

  /admin/system/users/{id}:
    patch:
      tags:
        - Admin / election > User Controllers
      summary: Update User
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                role: ""
      responses:
        "200":
          description: Successful response

    delete:
      tags:
        - Admin / election > User Controllers
      summary: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response

  /admin/election/{id}/results:
    get:
      tags:
        - Admin / election > Results
      summary: Get Results
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response

    delete:
      tags:
        - Admin / election > Results
      summary: DeleteResults
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
